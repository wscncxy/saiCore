package com.sai.core.utils.security;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.crypto.Cipher;import javax.crypto.spec.IvParameterSpec;import javax.crypto.spec.SecretKeySpec;import java.io.UnsupportedEncodingException;import java.util.Base64;/** *  * 类AESUtil2.java的实现描述：标准AES加密方法 */public class AESH5Util {	private static final Logger log         = LoggerFactory.getLogger(AESH5Util.class);    // AES加密模式    private static final String CIPHER_MODE = "AES/CBC/PKCS5Padding";    // 偏移量    private static final String SECRET_KEY  = "123456789gateway";    private static final String ENCRYPT_ALG = "AES";    private static final String ENCODE      = "UTF-8";    /**     * 创建16位向量: 不够则用0填充     *      * @return     * @throws UnsupportedEncodingException     */    private static IvParameterSpec createIV() throws UnsupportedEncodingException {        byte[] data = SECRET_KEY.getBytes(ENCODE);        return new IvParameterSpec(data);    }    /**     * 加密：有向量16位，结果转base64     *      * @param context     * @return     */    public static String encrypt(String context, String pkey) {        try {            byte[] content = context.getBytes(ENCODE);            SecretKeySpec key = new SecretKeySpec(pkey.getBytes(ENCODE), ENCRYPT_ALG);            Cipher cipher = Cipher.getInstance(CIPHER_MODE);            cipher.init(Cipher.ENCRYPT_MODE, key, createIV());            byte[] data = cipher.doFinal(content);            return Base64.getEncoder().encodeToString(data);        } catch (Exception e) {            log.error("AES加密失败{}", e);        }        return null;    }    /**     * 解密     *      * @param context     * @return     */    public static String decrypt(String context, String pkey) {        try {            byte[] data = Base64.getDecoder().decode(context);            SecretKeySpec key = new SecretKeySpec(pkey.getBytes(ENCODE), ENCRYPT_ALG);            Cipher cipher = Cipher.getInstance(CIPHER_MODE);            cipher.init(Cipher.DECRYPT_MODE, key, createIV());            byte[] content = cipher.doFinal(data);            return new String(content, ENCODE);        } catch (Exception e) {            log.error("AES解密失败{}", e);        }        return null;    }}